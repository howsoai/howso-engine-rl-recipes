name: Reusable WF - Run Pytest

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      platform-pretty:
        description: One of 'Windows', 'Linux', 'MacOS'
        required: true
        type: string
      config-fp:
        required: false
        type: string
      config-pretty:
        required: false
        type: string
        default: "[no config]"
      python-version:
        required: true
        type: string
      upstream-details:
        required: false
        type: string
      pmlb-cache:
        description: Downloads and extracts the PMLB dataset cache from the GitHub cache if true
        required: false
        type: boolean
        default: false
      move-data:
        description: Whether to move data from the 'howso' subdirectory of the PMLB cache into a repo-level 'data' folder
        required: false
        type: boolean
        default: false
      amalgam-plat-arch:
        description: The platform/arch string to match when downloading Amalgam builds
        required: false
        type: string
        default: "linux-amd64"
      workers:
        description: The number of Pytest workers to use
        type: string
        required: false
        default: '1'
      enable-utf8:
        description: Whether to enable the PYTHONUTF8 flag
        type: boolean
        default: false
      setup-docker:
        description: Whether to log in to the JFrog dpbuild docker registry
        type: boolean
        default: false
      targets:
        description: Multiple pytest targets to run as a matrix strategy (JSON)
        type: string
        required: false
        default: '["."]'
      test-results-upload:
        description: Whether to upload JUnit test results XML
        type: boolean
        default: true
      traces-fp:
        description: Path of Amalgam trace files
        type: string
        default: './traces'
        required: false
      telemetry:
        description: Whether to capture workflow telemetry
        type: boolean
        default: true
        required: false
      cat-logs-from-target:
        description: Whether to print the contents of {target}.txt
        type: boolean
        required: false
        default: false
      debug:
        description: Run Pytest with GDB and print a stacktrace (LINUX ONLY!)
        type: boolean
        required: false
        default: false

defaults:
  run:
    shell: bash

jobs:

  test:
    name: Pytest ${{ matrix.target }} (${{ inputs.python-version }}, ${{inputs.platform-pretty}}, ${{ inputs.config-pretty }})
    runs-on: ${{ inputs.platform }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:

      - uses: actions/checkout@v4

      - name: Collect Workflow Telemetry
        if: inputs.telemetry == true
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          comment_on_pr: off
          proc_trace_chart_show: off
          proc_trace_table_show: off

      - name: Pull GitHub cache
        if: inputs.pmlb-cache == true
        id: cache
        uses: actions/cache@v4
        env:
          cache-name: dataset-cache-${{ inputs.platform-pretty }}
        with:
          path: ~/dataset_cache
          key: dataset-cache-${{ inputs.platform-pretty }}
      
      - name: Setup PMLB Cache
        if: inputs.pmlb-cache == true
        run: |
          ls -l ~/dataset_cache
          mv ~/dataset_cache/dataset_cache.tar.gz dataset_cache.tar.gz && rm -rf dataset-cache
          tar xzvf dataset_cache.tar.gz
          ls .dataset_cache
          cp -r .dataset_cache ~/.dataset_cache

      - name: Move Howso Data to repo folder
        if: inputs.move-data == true
        run: |
          mkdir -p data && cp -r .dataset_cache/howso/* ./data/
          # Extract all compressed files
          find ./data -type f -name "*.gz" -print0 | xargs -0 gunzip
          ls -a ./data/NYC_parking

      - name: Set up Docker
        if: inputs.setup-docker == true
        run: |
          echo "${{ secrets.JFROG_ACCESS_TOKEN }}" | docker login dpbuild-docker-edge.jfrog.io --username "vsts-build@diveplane.com" --password-stdin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Download dependencies
        env:
          GH_TOKEN: ${{ secrets.HOWSOAI_WORKFLOW_AUTOMATION_CLASSIC_TOKEN }}
        run: |
          pwd
          while read -r repo; do
            echo "Getting details for $repo"
            # Remove carriage return character (Windows issue)
            repo=$(echo $repo | tr -d '\r')
            run_type=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_type"')
            run_id=$(printf "%s" '${{ inputs.upstream-details }}' | jq -r --arg repo "$repo" '.[$repo]."run_id"')
            #run_type=$(python -c "import json; import os; import sys; print(json.loads(sys.argv[1])[sys.argv[2].replace('\r', '')]['run_type'])" '${{ inputs.upstream-details }}' $repo)
            #run_id=$(python -c "import json; import os; import sys; print(json.loads(sys.argv[1])[sys.argv[2].replace('\r', '')]['run_id'])" '${{ inputs.upstream-details }}' $repo)
            echo "run_type: $run_type, run_id: $run_id"
            IFS='-' read -r plat arch <<< "${{ inputs.amalgam-plat-arch }}"
            if [[ "$repo" == "amalgam" && "${{ github.event.repository.name }}" == "amalgam-lang-py" ]]; then
              # Necessary since a-l-py tests will be run with an editable install of a-l-py
              echo "Downloading and extracting Amalgam binaries for $plat/$arch..."
              gh $run_type download -D amalgam/lib/$plat/$arch -R "howsoai/$repo" -p "*${{ inputs.amalgam-plat-arch }}*" "$run_id"
              # Extract binaries
              cd amalgam/lib/$plat/$arch && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
              cp lib/* .
              ls -l
              cd ../../../..
            elif [[ "$repo" == "howso-engine" && "${{ github.event.repository.name }}" == "howso-engine-py" ]]; then
              # Necessary since hse-py tests will be run with an editable install of hse-py
              echo "Downloading and extracting Howso Engine CAMLs..."
              gh $run_type download -D howso/howso-engine -R "howsoai/$repo" -p "howso-engine-*" "$run_id"
              # Extract CAMLs
              cd howso/howso-engine && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz
              pwd && ls -l
              cd ../..
            elif [[ "$repo" != "amalgam" && "$repo" != "howso-engine" ]]; then
              gh $run_type download -D $repo -R "howsoai/$repo" -p "*-py3-none-any*" "$run_id"
              # Needed because release/non-release downloads are different structure
              cd $repo && if [ ! -f *.whl ]; then mv */*.whl ./; fi
              cd ..
            fi
          done < <(printf "%s" '${{ inputs.upstream-details }}' | jq -rc 'keys[]')

      - name: Configure MacOS environment
        if: inputs.platform-pretty == 'MacOS'
        run: |
          brew install libomp

      - name: Download tz data
        if: inputs.platform-pretty == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path "./config/powershell/Download-Tzdata.ps1") {
            & "./config/powershell/Download-Tzdata.ps1"
          } else {
              Write-Host "Download-Tzdata script not found"
          }

      - name: Remove Pip cache
        if: inputs.platform-pretty == 'Windows'
        shell: bash
        run: rm -rf ~/AppData/Local/pip/cache

      - name: Run unit tests
        run: |
          python -m pip install --upgrade pip
          export TEST_OPTIONS=USE_HOWSO_CONFIG
          if [[ -n "${{ secrets.JFROG_ACCESS_TOKEN }}" ]]; then
            export PIP_EXTRA_INDEX_URL=https://vsts-build@diveplane.com:${{ secrets.JFROG_ACCESS_TOKEN }}@dpbuild.jfrog.io/artifactory/api/pypi/pypi-edge/simple
          fi
          # Install requirements.txt
          ./bin/build.sh install_deps ${{ inputs.python-version }}
          # Install any custom package versions
          declare -a arr=("howso-validator-enterprise-py" "howso-validator-py" "howso-synthesizer-py" "howso-engine-py" "amalgam-lang-py")
          for repo in "${arr[@]}"; do
            if [ -d "$repo" ]; then
              echo "Found custom $repo version; installing..."
              pip uninstall ${repo%-py} -y
              pip install $repo/*.whl
            fi
          done
          # The below may fail if there are no howso-branded packages installed, i.e., in the case of howso-run-py
          pip list | grep amalgam || true
          pip list | grep howso || true
          pip list | grep numpy || true
          env | grep HOWSO_CONFIG || true
          echo "Running pytests..."

          # Run GDB in batch mode and capture the output
          echo "LLDB installation complete"
          export PYTHONFAULTHANDLER=1
          set +e

          # Capture LLDB output
          lldb_output=$(lldb --batch -o "target create python" -o "settings set -- target.run-args -m pytest -s ${{ matrix.target }}" -o "settings set target.process.stop-on-exec false" -o "run" -o "bt" -- 2>&1)
          lldb_exit_code=$?
          echo "$lldb_output"

          # Evaluate LLDB exit code and exit this workflow accordingly
          if [[ $lldb_exit_code -ne 0 ]]; then
            # If LLDB exited with an error but the test process passed, exit 0
            if echo "$lldb_output" | tail -n 2 | grep -q "exited normally"; then
              exit 0
            # Else, the test process failed, exit 1
            else
              exit 1
            fi
          else
            # If LLDB exited with code 0, there was a segfault
            exit 139
          fi

      - name: Expand test logs
        if: inputs.cat-logs-from-target
        continue-on-error: true
        run: |
          ls ${{ matrix.target }}
          cat ${{ matrix.target }}.txt

      - name: Check for skipped tests
        continue-on-error: true
        run: |
          SKIPPED=$(sed -n 's/.*skipped="\([0-9]\{1,\}\)".*/\1/p' junit/test-results.xml)
          if [[ "$SKIPPED" != "0" ]]; then
            echo "::warning title=Skipped Tests::[${{ inputs.python-version }}/${{inputs.platform-pretty}}/${{ inputs.config-pretty }}] This workflow run included ${SKIPPED} skipped tests!"
          fi

      - name: Upload trace files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "traces-${{ inputs.platform-pretty }}-${{ inputs.python-version }}-${{ inputs.config-pretty }}"
          path: ${{ inputs.traces-fp }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "test-results-${{ inputs.platform-pretty }}-${{ inputs.python-version }}-${{ inputs.config-pretty }}"
          path: junit/test-results.xml
          overwrite: true

  upload-test-results:
    needs: ['test']
    if: inputs.test-results-upload == true && ! inputs.debug
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./tmp
          name: "test-results-${{ inputs.platform-pretty }}-${{ inputs.python-version }}-${{ inputs.config-pretty }}"

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: './tmp/test-results.xml'